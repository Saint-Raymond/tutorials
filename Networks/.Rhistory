rm(list = ls())
setwd("/Users/leasaint-raymond/Documents/GitHub/tutorials/Networks")
library("igraph")
nodes <- read.csv2("./auctionnodes.csv", header=T, as.is=T)
links <- read.csv2("./auctionlinks.csv", header=T, as.is=T)
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
net
E(net)
V(net)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="frequence")
as_adjacency_matrix(net, attr="frequency")
as_edgelist(net)
gorder(net)
gsize(net)
number
diameter(net, directed = T, unconnected = TRUE, weights = NULL)
mean_distance(net)
edge_density(net)
reciprocity(net) #
gorder(net)
plot(net)
?igraph.plotting
deg <- degree(net, mode="all")
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
setwd("/Users/leasaint-raymond/Documents/GitHub/tutorials/Networks")
nodes <- read.csv2("./auctionnodes.csv", header=T, as.is=T)
# Do the same for the links file, that we call "links", here:.
links <- read.csv2("./auctionlinks.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
deg <- degree(net, mode="all")
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
vertex_attr(net)$color[grep(pattern = "expert", vertex_attr(net)$type)]<-"#1C912C"
vertex_attr(net)$color[grep(pattern = "dealer", vertex_attr(net)$type)]<-"blue"
deg <- degree(net, mode="all")
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
# You can also make a partition according to the "type" attribute which is in the nodes file:
# here, all the nodes are orange (see above) but the experts are in green and the dealers in blue
vertex_attr(net)$color[grep(pattern = "expert", vertex_attr(net)$type)]<-"#1C912C"
vertex_attr(net)$color[grep(pattern = "dealer", vertex_attr(net)$type)]<-"blue"
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=E(net)$frequency*2,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg*10,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$name,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.5,
vertex.label.color="black", # the color of the labels for the vertices
main="Network of the auction sales", #title of your network
sub="in Paris, linking auctioneers and experts" #subtitle
)
clp <- cluster_label_prop(net)
class(clp)
plot(clp, net)
V(net)$community <- clp$membership
colrs <- adjustcolor( c("gray50", "tomato", "gold", "yellowgreen"), alpha=.6)
plot(net, vertex.color=colrs[V(net)$community])
plot(net,
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, #
edge.color="gray80",
edge.width=E(net)$frequency*2,
edge.curved=0.3,
vertex.frame.color=NA,
vertex.size=deg*10,
vertex.label=V(net)$name,
vertex.label.family="Helvetica",
vertex.label.cex=.5,
vertex.color=colrs[V(net)$community], # here is the change!
main="Réseau des ventes",
sub="entre commissaires-priseurs et experts"
)
# Let's clean up the workspace :
dev.off()
library('maps')
library('geosphere')
library("igraph")
map(
"france",
# ici, mes données sont françaises donc je choisis un fond de carte français
# plusieurs fonds sont disponibles (pas tous les pays) : regarder la documentation ?map
# pour un fond mondial, remplacer "france" par "world", par exemple map("world", col="skyblue",  border="gray10", fill=TRUE, bg="gray30")
# pour les Etats-Unis, écrire par exemple map("usa", col="tomato",  border="gray10", fill=TRUE, bg="gray30")
# resp. "italy" pour l'Italie,   map("italy", col="tomato",  border="gray10", fill=TRUE, bg="gray30",lwd=0.6)
col="grey50", # la couleur du fond de carte, ici gris
fill=TRUE,
border="gray10", # la couleur des frontiières externes et internes
bg="white", # la couleur de l'arrière plan, ici noir
# on peut rajouter l'argument lwd=0.6, pour un effet de transparence, entre 0 et 1
)
points(x=nodes$longitude, y=nodes$latitude, pch=19,
cex=nodes$wage/800, col="orange")
col.1 <- adjustcolor("orange red", alpha=0.4)
col.2 <- adjustcolor("orange", alpha=0.4)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(100)
for(i in 1:nrow(links))  {
node1 <- nodes[nodes$name == links[i,]$auctioneer,]
#la source est ma colonne "cp" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
node2 <- nodes[nodes$name == ventes[i,]$expert,]
#la destination est ma colonne "expert" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*links[i,]$frequency / max(links$frequency)
#variable quantitative pour l'épaisseur des liens
# calculée à partir du champ "fréquence" de mon fichier de liens (ici, ventes)
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
for(i in 1:nrow(links))  {
node1 <- nodes[nodes$name == links[i,]$auctioneer,]
#la source est ma colonne "cp" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
node2 <- nodes[nodes$name == links[i,]$expert,]
#la destination est ma colonne "expert" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*links[i,]$frequency / max(links$frequency)
#variable quantitative pour l'épaisseur des liens
# calculée à partir du champ "fréquence" de mon fichier de liens (ici, ventes)
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
map(
"france",
# ici, mes données sont françaises donc je choisis un fond de carte français
# plusieurs fonds sont disponibles (pas tous les pays) : regarder la documentation ?map
# pour un fond mondial, remplacer "france" par "world", par exemple map("world", col="skyblue",  border="gray10", fill=TRUE, bg="gray30")
# pour les Etats-Unis, écrire par exemple map("usa", col="tomato",  border="gray10", fill=TRUE, bg="gray30")
# resp. "italy" pour l'Italie,   map("italy", col="tomato",  border="gray10", fill=TRUE, bg="gray30",lwd=0.6)
col="white", # la couleur du fond de carte, ici gris
fill=TRUE,
border="gray10", # la couleur des frontiières externes et internes
bg="white", # la couleur de l'arrière plan, ici noir
# on peut rajouter l'argument lwd=0.6, pour un effet de transparence, entre 0 et 1
)
points(x=nodes$longitude, y=nodes$latitude, pch=19,
cex=nodes$wage/800, col="orange")
col.1 <- adjustcolor("orange red", alpha=0.4)
col.2 <- adjustcolor("orange", alpha=0.4)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(100)
for(i in 1:nrow(links))  {
node1 <- nodes[nodes$name == links[i,]$auctioneer,]
#la source est ma colonne "cp" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
node2 <- nodes[nodes$name == links[i,]$expert,]
#la destination est ma colonne "expert" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*links[i,]$frequency / max(links$frequency)
#variable quantitative pour l'épaisseur des liens
# calculée à partir du champ "fréquence" de mon fichier de liens (ici, ventes)
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
for(i in 1:nrow(links))  {
node1 <- nodes[nodes$name == links[i,]$auctioneer,]
node2 <- nodes[nodes$name == links[i,]$expert,]
# now, I tell R where are the coordinates.
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*links[i,]$frequency / max(links$frequency)
#finally, I set the size of the edge / arc
# here, the field "frequency" of the links file.
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
dev.off()
map(
"france",
# here, my data are French so I choose a French basemap
# several basemaps are available (but not all countries):
# check the ?map documentation.
# For a world basemap, replace "france" by "world",
# For the USA, eplace "france" by "usa", resp. "italy" for Italy.
col="white", # the color of the basemap, here white. Or col="skyblue" or col="tomato"
fill=TRUE,
border="gray10", # the color of the external and internal borders
bg="white", #the color of the background, here white.
# we can add the argument lwd=0.6, for a transparency effect, between 0 and 1
)
points(x=nodes$longitude, y=nodes$latitude, pch=19,
cex=nodes$wage/800, col="orange")
col.1 <- adjustcolor("orange red", alpha=0.4)
col.2 <- adjustcolor("orange", alpha=0.4)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(100)
for(i in 1:nrow(links))  {
node1 <- nodes[nodes$name == links[i,]$auctioneer,]
node2 <- nodes[nodes$name == links[i,]$expert,]
# now, I tell R where are the coordinates.
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*links[i,]$frequency / max(links$frequency)
#finally, I set the size of the edge / arc
# here, the field "frequency" of the links file.
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
rm(list = ls())
nodes <- read.csv2("/Users/leasaint-raymond/Desktop/profs_noeuds.csv", header=T, as.is=T)
links <- read.csv2("/Users/leasaint-raymond/Desktop/profs_liens.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
deg <- degree(net, mode="all")
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
vertex_attr(net)$color[grep(pattern = "h", vertex_attr(net)$type)]<-"blue"
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=2,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg*10,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.5,
vertex.label.color="black", # the color of the labels for the vertices
)
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=0.03,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg*10,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.5,
vertex.label.color="black", # the color of the labels for the vertices
)
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=0.03,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg*0.4,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.5,
vertex.label.color="black", # the color of the labels for the vertices
)
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=1,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.5,
vertex.label.color="black", # the color of the labels for the vertices
)
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=1,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.1,
vertex.label.color="black", # the color of the labels for the vertices
)
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=1,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.2,
vertex.label.color="black", # the color of the labels for the vertices
)
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
vertex_attr(net)$color[grep(pattern = "f", vertex_attr(net)$type)]<-"blue"
plot(net,
#choose your spatialization, here Fruchterman Reingold
# but you can also write =layout_in_circle(net)
layout=layout.fruchterman.reingold(net),
edge.arrow.size=0, # the size of the arrow : 0 if no arrow
# Now, choose the color of the edges:
edge.color="gray80",
# or write = rgb(.1, .1, .1, .8) i.e. (red value, green value, blue value, transparency)
# If you want to keep only node labels, write vertex.shape="none
# Now, choose the thickness of the link:
# here, the size of the edge depends on the "frequency", with a scale
# but you can also set a fixed size, e.g. edge.width=10
edge.width=1,
edge.curved=0.3, # the curvature of the links between 0 and 1 (0 if straight lines)
# Now, choose the color of the border of the vertices : here NA means no border.
# but you can also write "black" for a black border.
vertex.frame.color=NA,
# Now, choose the size of the vertices.
# Here, size of the vertex is proportional to the centrality degree (see above), with a scale x10
# If you want to set a size proportional to a quantitative attribute, like the "wage" in this example,
# you write vertex.size=V(net)$wage*0.04
vertex.size=deg,
# Now, you set the labels of your vertices.
# Here, I choose the "name" attribute of my nodes,
# but I can also choose the "city" and write vertex.label=V(net)$city
vertex.label=V(net)$individu,
vertex.label.family="Helvetica", # the font of the labels for the vertices
# Choose the size of the labels.
# For proportionality to an attribute, e.g. "wage", write =V(net)$wage*0.0004
vertex.label.cex=.1,
vertex.label.color="black", # the color of the labels for the vertices
)
