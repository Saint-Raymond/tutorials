library("igraph")
nodes <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionnodes.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
links <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionlinks.csv", header=T, as.is=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
class(net)
net
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="frequence")
plot(net)
# On peut décider de la couleur des sommets en amont, par exemple colorer tous les noeuds en orange :
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
vertex_attr(net)$color[grep(pattern = "expert", vertex_attr(net)$type)]<-"#1C912C"
vertex_attr(net)$color[grep(pattern = "marchand", vertex_attr(net)$type)]<-"blue"
plot(net,
layout=layout.fruchterman.reingold(net), #la spatialisation, ici Fruchterman Reingold mais on peut également écrire =layout_in_circle(net) etc
edge.arrow.size=0, # la taille de la flèche : 0 si pas de flèche
edge.color="gray80", # la couleur des liens ; ou = rgb(.1, .1, .1, .8) c'est-à-dire (valeur de rouge, valeur de vert, valeur de bleu, transparence)
# pour ne garder que des labels de noeuds, sans le noeuds, écrire vertex.shape="none"
edge.width=E(net)$frequence*2, # je fais varier l'épaisseur du lien par rapport à la fréquence, mise à l'échelle ici
# pour une épaisseur lien fixe, écrire edge.width=10, par exemple
edge.curved=0.3, # la courbure des liens entre 0 et 1 : 0 si lignes droites
vertex.frame.color=NA,# la couleur de la bordure des sommets : ici NA : pas de bordure. Ecrire ="black" pour une bordure noire.
vertex.size=deg*10, # cela veut dire que la grosseur du sommet est proportionnelle au degré (échelle x10)
#pour une grosseur proportionnelle à un attribut quantitatif, comme le salaire, on écrit vertex.size=V(net)$salaire*0.04
vertex.label=V(net)$individu,
# pour donner un attribut à l'étiquette, par exemple la ville, on écrit vertex.label=V(net)$ville
# on peut également donner comme attribut le nom "complet" du sommet,
vertex.label.family="Helvetica", # la police des étiquettes de sommets
vertex.label.cex=.5, # la taille des étiquettes. Pour une proportionnalité, écrire =V(net)$salaire*0.0004, ici proportionnellement à l'attribut "salaire"
vertex.label.color="black", # la couleur des étiquettes de sommets.
main="Réseau des ventes", #titre du réseau
sub="entre commissaires-priseurs et experts" #sous-titre
)
deg <- degree(net, mode="all")
plot(net,
layout=layout.fruchterman.reingold(net), #la spatialisation, ici Fruchterman Reingold mais on peut également écrire =layout_in_circle(net) etc
edge.arrow.size=0, # la taille de la flèche : 0 si pas de flèche
edge.color="gray80", # la couleur des liens ; ou = rgb(.1, .1, .1, .8) c'est-à-dire (valeur de rouge, valeur de vert, valeur de bleu, transparence)
# pour ne garder que des labels de noeuds, sans le noeuds, écrire vertex.shape="none"
edge.width=E(net)$frequence*2, # je fais varier l'épaisseur du lien par rapport à la fréquence, mise à l'échelle ici
# pour une épaisseur lien fixe, écrire edge.width=10, par exemple
edge.curved=0.3, # la courbure des liens entre 0 et 1 : 0 si lignes droites
vertex.frame.color=NA,# la couleur de la bordure des sommets : ici NA : pas de bordure. Ecrire ="black" pour une bordure noire.
vertex.size=deg*10, # cela veut dire que la grosseur du sommet est proportionnelle au degré (échelle x10)
#pour une grosseur proportionnelle à un attribut quantitatif, comme le salaire, on écrit vertex.size=V(net)$salaire*0.04
vertex.label=V(net)$individu,
# pour donner un attribut à l'étiquette, par exemple la ville, on écrit vertex.label=V(net)$ville
# on peut également donner comme attribut le nom "complet" du sommet,
vertex.label.family="Helvetica", # la police des étiquettes de sommets
vertex.label.cex=.5, # la taille des étiquettes. Pour une proportionnalité, écrire =V(net)$salaire*0.0004, ici proportionnellement à l'attribut "salaire"
vertex.label.color="black", # la couleur des étiquettes de sommets.
main="Réseau des ventes", #titre du réseau
sub="entre commissaires-priseurs et experts" #sous-titre
)
clp <- cluster_label_prop(net)
plot(clp, net)
dev.off()
library('maps')
library('geosphere')
library("igraph")
map(
"france",
# ici, mes données sont françaises donc je choisis un fond de carte français
# plusieurs fonds sont disponibles (pas tous les pays) : regarder la documentation ?map
# pour un fond mondial, remplacer "france" par "world", par exemple map("world", col="skyblue",  border="gray10", fill=TRUE, bg="gray30")
# pour les Etats-Unis, écrire par exemple map("usa", col="tomato",  border="gray10", fill=TRUE, bg="gray30")
# resp. "italy" pour l'Italie,   map("italy", col="tomato",  border="gray10", fill=TRUE, bg="gray30",lwd=0.6)
col="grey50", # la couleur du fond de carte, ici gris
fill=TRUE,
border="gray10", # la couleur des frontiières externes et internes
bg="white", # la couleur de l'arrière plan, ici noir
# on peut rajouter l'argument lwd=0.6, pour un effet de transparence, entre 0 et 1
)
points(x=officiers$longitude, y=officiers$latitude, pch=19,
cex=officiers$salaire/800, col="orange")
officiers <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionnodes.csv", header=TRUE)
ventes <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionlinks.csv", header=TRUE, as.is=TRUE)
map(
"france",
# ici, mes données sont françaises donc je choisis un fond de carte français
# plusieurs fonds sont disponibles (pas tous les pays) : regarder la documentation ?map
# pour un fond mondial, remplacer "france" par "world", par exemple map("world", col="skyblue",  border="gray10", fill=TRUE, bg="gray30")
# pour les Etats-Unis, écrire par exemple map("usa", col="tomato",  border="gray10", fill=TRUE, bg="gray30")
# resp. "italy" pour l'Italie,   map("italy", col="tomato",  border="gray10", fill=TRUE, bg="gray30",lwd=0.6)
col="grey50", # la couleur du fond de carte, ici gris
fill=TRUE,
border="gray10", # la couleur des frontiières externes et internes
bg="white", # la couleur de l'arrière plan, ici noir
# on peut rajouter l'argument lwd=0.6, pour un effet de transparence, entre 0 et 1
)
points(x=officiers$longitude, y=officiers$latitude, pch=19,
cex=officiers$salaire/800, col="orange")
col.1 <- adjustcolor("orange red", alpha=0.4)
col.2 <- adjustcolor("orange", alpha=0.4)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(100)
for(i in 1:nrow(ventes))  {
node1 <- officiers[officiers$individu == ventes[i,]$cp,]
#la source est ma colonne "cp" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
node2 <- officiers[officiers$individu == ventes[i,]$expert,]
#la destination est ma colonne "expert" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*ventes[i,]$frequence / max(ventes$frequence)
#variable quantitative pour l'épaisseur des liens
# calculée à partir du champ "fréquence" de mon fichier de liens (ici, ventes)
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
install.packages("png")
install.packages("RColorBrewer")
library("igraph")
nodes <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionnodes.csv", header=T, as.is=T)
links <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionlinks.csv", header=T, as.is=T)
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(net)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="frequence")
deg <- degree(net, mode="all")
vertex_attr(net)$color<-rep("#FF9C0B", length(V(net)))
vertex_attr(net)$color[grep(pattern = "expert", vertex_attr(net)$type)]<-"#1C912C"
vertex_attr(net)$color[grep(pattern = "marchand", vertex_attr(net)$type)]<-"blue"
plot(net,
layout=layout.fruchterman.reingold(net), #la spatialisation, ici Fruchterman Reingold mais on peut également écrire =layout_in_circle(net) etc
edge.arrow.size=0, # la taille de la flèche : 0 si pas de flèche
edge.color="gray80", # la couleur des liens ; ou = rgb(.1, .1, .1, .8) c'est-à-dire (valeur de rouge, valeur de vert, valeur de bleu, transparence)
# pour ne garder que des labels de noeuds, sans le noeuds, écrire vertex.shape="none"
edge.width=E(net)$frequence*2, # je fais varier l'épaisseur du lien par rapport à la fréquence, mise à l'échelle ici
# pour une épaisseur lien fixe, écrire edge.width=10, par exemple
edge.curved=0.3, # la courbure des liens entre 0 et 1 : 0 si lignes droites
vertex.frame.color=NA,# la couleur de la bordure des sommets : ici NA : pas de bordure. Ecrire ="black" pour une bordure noire.
vertex.size=deg*10, # cela veut dire que la grosseur du sommet est proportionnelle au degré (échelle x10)
#pour une grosseur proportionnelle à un attribut quantitatif, comme le salaire, on écrit vertex.size=V(net)$salaire*0.04
vertex.label=V(net)$individu,
# pour donner un attribut à l'étiquette, par exemple la ville, on écrit vertex.label=V(net)$ville
# on peut également donner comme attribut le nom "complet" du sommet,
vertex.label.family="Helvetica", # la police des étiquettes de sommets
vertex.label.cex=.5, # la taille des étiquettes. Pour une proportionnalité, écrire =V(net)$salaire*0.0004, ici proportionnellement à l'attribut "salaire"
vertex.label.color="black", # la couleur des étiquettes de sommets.
main="Réseau des ventes", #titre du réseau
sub="entre commissaires-priseurs et experts" #sous-titre
)
plot(clp, net)
clp <- cluster_label_prop(net)
class(clp)
plot(clp, net)
dev.off()
library('maps')
library('geosphere')
library("igraph")
officiers <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionnodes.csv", header=TRUE)
ventes <- read.csv2("/Users/leasaint-raymond/Documents/GitHub/tutorials/Reseaux_avec_R/auctionlinks.csv", header=TRUE, as.is=TRUE)
map(
"france",
# ici, mes données sont françaises donc je choisis un fond de carte français
# plusieurs fonds sont disponibles (pas tous les pays) : regarder la documentation ?map
# pour un fond mondial, remplacer "france" par "world", par exemple map("world", col="skyblue",  border="gray10", fill=TRUE, bg="gray30")
# pour les Etats-Unis, écrire par exemple map("usa", col="tomato",  border="gray10", fill=TRUE, bg="gray30")
# resp. "italy" pour l'Italie,   map("italy", col="tomato",  border="gray10", fill=TRUE, bg="gray30",lwd=0.6)
col="grey50", # la couleur du fond de carte, ici gris
fill=TRUE,
border="gray10", # la couleur des frontiières externes et internes
bg="white", # la couleur de l'arrière plan, ici noir
# on peut rajouter l'argument lwd=0.6, pour un effet de transparence, entre 0 et 1
)
points(x=officiers$longitude, y=officiers$latitude, pch=19,
cex=officiers$salaire/800, col="orange")
#On peut modifier des couleurs ici :
col.1 <- adjustcolor("orange red", alpha=0.4)
col.2 <- adjustcolor("orange", alpha=0.4)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(100)
for(i in 1:nrow(ventes))  {
node1 <- officiers[officiers$individu == ventes[i,]$cp,]
#la source est ma colonne "cp" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
node2 <- officiers[officiers$individu == ventes[i,]$expert,]
#la destination est ma colonne "expert" dans le fichier des liens (ici, ventes)
# elle correspond au champ "individu" dans le fichier des noeuds (ici, officiers)
arc <- gcIntermediate( c(node1[1,]$longitude, node1[1,]$latitude),
c(node2[1,]$longitude, node2[1,]$latitude),
n=1000,
addStartEnd=TRUE )
edge.ind <- round(100*ventes[i,]$frequence / max(ventes$frequence)
#variable quantitative pour l'épaisseur des liens
# calculée à partir du champ "fréquence" de mon fichier de liens (ici, ventes)
)
lines(arc, col=edge.col[edge.ind], lwd=edge.ind/30)
}
